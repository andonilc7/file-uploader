// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt   DateTime
}

model User {
  id  Int  @id @default(autoincrement())
  username String @unique
  password String
  files File[]
  folders Folder[]
}

model File {
  id Int @id @default(autoincrement())
  originalName String
  uploadName String @unique
  encoding String
  mimetype String
  size Int
  uploadTime DateTime @default(now())
  user User @relation(fields: [userId], references:[id])

  userId Int 

  // optional because if a file doesn't have a folder that means it's in root
  // also will automatically put in root if folder is deleted
  folder Folder? @relation(fields: [folderId], references: [id])
  folderId Int?
}

model Folder {
  id Int @id @default(autoincrement())
  folderName String
  files File[]

  parentFolderId Int?
  // we need the relation name bc it is a self-relation
  // doing on delete cascade to make it simpler
  parentFolder Folder? @relation("FolderHierarchy", fields: [parentFolderId], references: [id], onDelete: Cascade)
  childFolders Folder[] @relation("FolderHierarchy")

  user User @relation(fields: [userId], references: [id])
  userId Int
}